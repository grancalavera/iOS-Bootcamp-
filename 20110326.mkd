# Hello World, View Controllers and Table Views

## Concepts

### NIB file
An XML file format, generated by XCode and editable using a GUI. Used to create the user interface and declare "outlets" (IBOutlets) to allow code objects to control the user interface.

### File's owner
A proxy object referencing to an actual Cocoa class. So far I've seen File's Owners referencing to UIViewController subclasses (for views) and UIApplicationDeletage protocol implementations (NSObject subclass).

### Protocol
A list of methods a class can conform to (implement).

### The view controller
Each view has a view controller. View controllers can be assigned to NIB objects using the "Class" field in the "Identity Inspector". All IBOutlets must be declared in the view controller's header file, also all IBActions.

### Responder objects
A responder object is an object that can respond to events and handle them. All responder objects are instances of classes that ultimately inherit from UIResponder (iOS). These classes declare a programmatic interface for event handling and define a default behavior for responders. The visible objects of an application are almost always responders —for example, windows, views and controls— and the application object is a responder as well. In iOS, view controls (UIViewController objects) are also responder objects.

### First responder
In an application, the responder objects that first receives many kinds of events is known as the first responder. It receives key events, motion events, and action messages, among others. (Mouse events and multitouch events first go to the view that is under the mouse pointer of finger; that view might or might not be the first responder). The first responder is typically the view in a window that an application deems best suited for handling an event. To receive an event, the responder must also indicate its willingness to become first responder. In addition to receiving event messages, a responder can receive action messages that have no target specified. (Action messages are sent by controls such as buttons and controls when user manipulate them.)

### Forward declarations
When using an additional class into a class, a forward class declaration must be included in the header of the class. Later on, the forwarded class header must be imported in the class implementation where the forward declaration was created.

## Design patterns

### Delegation
Using protocols (method declarations in a header file), an object can implement methods from another object. From documentation: An object sends a message to another object specified as its delegate. Is an alternative to inheritance.

### MVC
Model view controller pattern: model > data, view > display of data, controller > mediates between model and views

### Target Action
A view can send a message (action) to another object (target) who can interpret the message and handle it.

## Things to remember
1. When creating a forward class declaration in a header file, remember to #import that class header file in the implementation where the forward declaration was created.
1. It is possible to create an UIViewController subclass without a NIB file, and then later assign such controller to any arbitrary NIB file.
1. A string with format (e.g.: concatenating strings and integers): [NSString stringWithFormat:@"My string following an int:%i", 5]; It supports the format characters defined for the ANSI C function printf()

## Classes and Protocols
### NSBundle
An abstraction that represents resources used in the application. Useful to load custom NIB files (for example). Represents a location in the file system that groups code and resources that can be used in a program. NSBundle objects locate program resources, dynamically load and unload executable code, and assist in localization. 

### NSIndexPath
An NSIndexPath is an object that specifies a path through a tree structure as a set of zero base integer indexes. Can be used to retrieve objects from tables. 
The NSIndexPath class represents the path to a specific node in a tree of nested array collections. This path is known as the index path.
Each index in an index path represents the index into an array of childern from one node in the tree to another, deeper, node.
iOS adds programming interfaces to the NSIndexPath class of the Foundation framework to facilitate the identification of rows and columns in UITableView objects. The API consists of a class method and two properties. The indexPathForRow:inSection: method creates an NSIndexPath object from row and section index numbers. The properties return the row index number and the section index number from such objects.

### NSLog
Logs NSStrings to the XCode console.

### NSNumber
NSNumber is a subclass of NSValue that offers a value as any C scalar (numeric) type. It defines a set of methods specifically for setting and accessing the value as signed or unsigned char, short int, long int, long long int, float, or double or as a BOOL. (Note that number objects do not necessarily preserve the type they are created with.) It also defines a compare: method to determine the ordering for two NSNumber objects.

### NSValue
An NSValue object is a simple container for a single C or Objective-C data item. It can hold any of the scalar types such as int, float and char, as well as pointers, structures, and objects ids. The purpose of this class is to allow items of such data types to be added to collections such as instances of NSArray and NSSet, which require their elements to be objects. NSValue objects are always immutable.

### NSArray
For ordered object collections

### NSSet
For unordered object collections

### NSNumberFormatter
Useful to format NSSNumber, for instance, adding currency sign or decimal places.
Instances of NSNumberFormatter format the textual representation of cells that contain NSNumber objects and convert textual representations of numeric values into NSNumber objects. The representation encompasses integers, floats, and doubles; floats and doubles can be formatted to a specified decimal position. NSNumberFormatter objects can also impose ranges on the numeric values cells can accept.

### NSNumberFormatterCurrencyStyle
See <a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/DataFormatting/DataFormatting.html">Introduction to Data Formatting Programming Guide For Cocoa</a>.

### NSString
The NSString class declares the programmatic interface for an object that manages immutable strings. An immutable string is a text string that is defined when is created and subsequently cannot be changed. NSString is implemented to represent an array of Unicode characters, in other words, a text string.

### UITextFieldDelegate
The UITextFieldDelegate protocol defines the messages sent to a text field delegate as part of the sequence of editing its text. All of the methods of this protocol are optional.

### UINavigationController
The UINavigationController class implements a specialized view controller that manages the navigation of hierarchical content. This class is not intended for subclassing. Instead, you use instances of it as-is in situations where you want your application's user interface to reflect the hierarchical nature of your content. This navigation interface makes it possible to present your data efficiently and also makes it easier for the user to navigate that content.

## References
1. Bundle Programming Guide <a href="http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFBundles/Introduction/Introduction.html#//apple_ref/doc/uid/10000123i">http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFBundles/Introduction/Introduction.html#//apple_ref/doc/uid/10000123i</a>">http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFBundles/Introduction/Introduction.html#//apple_ref/doc/uid/10000123i">http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFBundles/Introduction/Introduction.html#//apple_ref/doc/uid/10000123i</a></a>
1. Cocoa Application Competencies for iOS - Events (iOS) <a href="http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/EventHandlingiPhone.html#//apple_ref/doc/uid/TP40009071-CH13-SW1">http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/EventHandlingiPhone.html#//apple_ref/doc/uid/TP40009071-CH13-SW1</a>
1. Cocoa Application Competencies for iOS - Responder Object <a href="http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/Responder.html">http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/Responder.html</a>
1. Cocoa Application Competencies for iOS - Target-Action <a href="http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html#//apple_ref/doc/uid/TP40009071-CH3-SW1">http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html#//apple_ref/doc/uid/TP40009071-CH3-SW1</a>
1. Cocoa Application Competencies for iOS <a href="http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/Animation.html">http://developer.apple.com/library/ios/#documentation/General/Conceptual/Devpedia-CocoaApp/Animation.html</a>
1. Cocoa Fundamentals Guide - Design Patterns <a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html">http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html</a>
1. Introduction to Data Formatting Programming Guide For Cocoa <a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/DataFormatting/DataFormatting.html">http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/DataFormatting/DataFormatting.html</a>
1. iOS Debugging Magic <a href="http://developer.apple.com/library/ios/#technotes/tn2239/_index.html">http://developer.apple.com/library/ios/#technotes/tn2239/_index.html</a>
1. iPhone SDK Development <a href="http://pragprog.com/titles/amiphd/iphone-sdk-development">http://pragprog.com/titles/amiphd/iphone-sdk-development</a>
1. NSBundle UIKit Additions Reference <a href="http://developer.apple.com/library/ios/#documentation/UIKit/Reference/NSBundle_UIKitAdditions/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007485">http://developer.apple.com/library/ios/#documentation/UIKit/Reference/NSBundle_UIKitAdditions/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007485</a>
1. View Controller Programming Guide for iOS <a href="http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007457">http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007457</a>
